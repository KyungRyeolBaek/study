import sys


N = int(input())
have_cards = set(input().strip().split())
M = int(input())
searching_cards = input().strip().split()

result = []
for card in searching_cards:
    if card in have_cards:
        result.append(str(1))
    else:
        result.append(str(0))
print(' '.join(result))

'''
# 숫자 카드

| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞힌 사람 | 정답 비율 |
| --- | --- | --- | --- | --- | --- |
| 2 초 | 256 MB | 111836 | 47178 | 34540 | 42.621% |

## 문제

숫자 카드는 정수 하나가 적혀져 있는 카드이다. 상근이는 숫자 카드 N개를 가지고 있다. 정수 M개가 주어졌을 때, 이 수가 적혀있는 숫자 카드를 상근이가 가지고 있는지 아닌지를 구하는 프로그램을 작성하시오.

## 입력

첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.

셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다. 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다. 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다

## 출력

첫째 줄에 입력으로 주어진 M개의 수에 대해서, 각 수가 적힌 숫자 카드를 상근이가 가지고 있으면 1을, 아니면 0을 공백으로 구분해 출력한다.

## 예제 입력 1

```
5
6 3 2 10 -10
8
10 9 -5 2 3 4 5 -10

```

## 예제 출력 1

```
1 0 0 1 1 0 0 1

```

## 출처

- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)
- 문제의 오타를 찾은 사람: [cko301](https://www.acmicpc.net/user/cko301), [eric00513](https://www.acmicpc.net/user/eric00513), [lety](https://www.acmicpc.net/user/lety), [mystika](https://www.acmicpc.net/user/mystika)
- 데이터를 추가한 사람: [dohoon](https://www.acmicpc.net/user/dohoon), [ldhhello](https://www.acmicpc.net/user/ldhhello)

## 알고리즘 분류

- [자료 구조](https://www.acmicpc.net/problem/tag/175)
- [정렬](https://www.acmicpc.net/problem/tag/97)
- [이분 탐색](https://www.acmicpc.net/problem/tag/12)
- [해시를 사용한 집합과 맵](https://www.acmicpc.net/problem/tag/136)

## 메모

hash 테이블로 고유 해시값을 통해 찾아와서 불러와야 시간초과 해결 됨.

파이썬에서 set(하고 딕셔너리)는 내부적으로 해시 테이블이란 자료구조로 이루어졌습니다.

해시 테이블에 대해 간략히 설명드리면,

각 값들을 해시함수(hash map) 에 넣으면 각 값들의 고유값이 나옵니다.

이렇게 나온 고유값들로 모든 값들에 빠르게 접근하는 자료구조가 해시 테이블입니다.

리스트에서 값을 찾을 때는 순차적으로 값을 찾습니다.

M_data 에 있는 각 값들을 찾을 때, 맨 앞에서부터 하나 하나 비교해서 찾습니다.

최악의 결과로는, 찾고자 하는 값이 맨 뒤에 있을 때 (또는 찾고자 하는 값이 없는 경우),

처음부터 시작해서 맨 뒤까지 계속 찾습니다.

즉, 리스트에서 in 으로 찾을 때는 최악인 경우 O(n) 시간 복잡도를 갖습니다.

반면, 위에서 말씀드린 해시 테이블인 경우, 각 값들의 고유 해시값으로 인해 평균적으로 O(1) 이라는 시간 복잡도로 값을 찾을 수 있습니다.

배열 (리스트) 와 해시 테이블 (set) 의 탐색 속도 차이 때문에 어느 하나는 시간 초과, 다른 하나는 성공이 됩니다.

(해시 테이블 관련해서는 질문자분께서 한 번 찾아보세요. 해시 테이블의 장/단점들 꼭 알아두셔야 합니다.

해시 테이블 쓰는게 더 유리한 경우, 해시 테이블 대신 그냥 리스트 쓰는게 더 유리한 경우 등등이요)
'''